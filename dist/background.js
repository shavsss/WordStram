(()=>{"use strict";function e(e){return"iw"===e||"he-IL"===e?"he":"in"===e?"id":"jw"===e?"jv":e||"auto"}const t="AIzaSyCLBHKWu7l78tS2xVmizicObSb0PpUqsxM",n="gemini-pro-latest",r="gemini-1.5-pro",o="gemini-1.5-flash";var s=function(e,t,n,r){return new(n||(n=Promise))((function(o,s){function a(e){try{l(r.next(e))}catch(e){s(e)}}function i(e){try{l(r.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,i)}l((r=r.apply(e,t||[])).next())}))};chrome.runtime.onInstalled.addListener((()=>{console.log("WordStream: Background script installed and running"),chrome.storage.sync.get(["settings"],(e=>{if(!e.settings){const e={targetLanguage:"en",autoTranslate:!0,notifications:!0,darkMode:!1};chrome.storage.sync.set({settings:e},(()=>{console.log("WordStream: Default settings initialized")}))}}))}));function a(e){try{if(e instanceof Error)return e.message;if("string"==typeof e)return e;if(e&&"object"==typeof e)try{return JSON.stringify(e)}catch(e){return"Object error - cannot stringify"}return String(e)}catch(e){return"Unknown error - cannot format"}}chrome.runtime.onConnect.addListener((e=>{console.log("WordStream: New connection established",e.name),e.onDisconnect.addListener((()=>{console.log("WordStream: Connection disconnected",e.name)}))})),chrome.runtime.onMessage.addListener(((t,n,r)=>{var o;return console.log("WordStream: Received message",t.action||t.type),"PING"===t.type?(r({success:!0,message:"Background script is active"}),!0):"TRANSLATE_WORD"===t.type?(function(t){return s(this,void 0,void 0,(function*(){var n,r;try{if(!t.text||"string"!=typeof t.text)return console.error("WordStream: Invalid text for translation:",t.text),{success:!1,error:"Invalid or missing text for translation"};console.log(`WordStream: Translating text: "${t.text.substring(0,30)}${t.text.length>30?"...":""}"`);const o=yield chrome.storage.sync.get(["settings"]);console.log("WordStream: Retrieved settings for translation:",o);const s=o.settings||{targetLanguage:"en"};let l=t.targetLang||s.targetLanguage||"en";l=e(l.toLowerCase().trim()),console.log("WordStream: Using target language for translation:",l);const c=`https://translation.googleapis.com/language/translate/v2?key=${i}`;console.log("WordStream: Sending translation request to Google API");try{const e=yield fetch(c,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({q:t.text,target:l})});if(console.log(`WordStream: Translation API response status: ${e.status} ${e.statusText}`),!e.ok){const t=yield e.text().catch((e=>"Could not read error response"));throw console.error(`WordStream: Translation request failed (${e.status}):`,t),new Error(`Translation request failed (${e.status}): ${t}`)}try{const t=yield e.json();if(console.log("WordStream: Translation result received"),!(null===(r=null===(n=t.data)||void 0===n?void 0:n.translations)||void 0===r?void 0:r[0]))throw console.error("WordStream: Invalid translation response structure:",t),new Error("Invalid translation response structure");return{success:!0,translation:t.data.translations[0].translatedText,detectedSourceLanguage:t.data.translations[0].detectedSourceLanguage}}catch(e){throw console.error("WordStream: Error parsing translation response:",a(e)),new Error(`Error parsing translation response: ${a(e)}`)}}catch(e){throw console.error("WordStream: Fetch error during translation:",a(e)),new Error(`Fetch error: ${a(e)}`)}}catch(e){return console.error("WordStream: Translation error:",a(e)),{success:!1,error:a(e)}}}))}(t.payload).then(r),!0):"gemini"===t.action?(console.log("WordStream: Processing Gemini request",{message:t.message,historyLength:null===(o=t.history)||void 0===o?void 0:o.length,videoId:t.videoId}),m(t).then((e=>{console.log("WordStream: Gemini response generated successfully"),r(e)})).catch((e=>{console.error("WordStream: Error generating Gemini response:",e),r({success:!1,answer:null,error:e instanceof Error?e.message:"Unknown error processing Gemini request"})})),!0):"UPDATE_LANGUAGE_SETTINGS"===t.type?(function(e){return s(this,void 0,void 0,(function*(){var t;try{if(console.log("WordStream: Updating language settings",e),!e.targetLanguage)throw new Error("Target language is required");const n=yield chrome.storage.sync.get(["settings"]);console.log("WordStream: Current settings",n.settings);const r=n.settings||{},o=e.targetLanguage.toLowerCase().trim();if(!o)throw new Error("Invalid target language format");const s=Object.assign(Object.assign({},r),{targetLanguage:o});yield new Promise(((e,t)=>{chrome.storage.sync.set({settings:s},(()=>{chrome.runtime.lastError?t(new Error(chrome.runtime.lastError.message)):e()}))}));const a=yield chrome.storage.sync.get(["settings"]);if(console.log("WordStream: Verified settings after update",a.settings),(null===(t=a.settings)||void 0===t?void 0:t.targetLanguage)!==o)throw new Error("Failed to verify settings update");return{success:!0}}catch(e){return console.error("WordStream: Error updating language settings:",e),{success:!1,error:e instanceof Error?e.message:"Unknown error"}}}))}(t.payload).then((e=>{console.log("WordStream: Language settings update result",e),r(e)})).catch((e=>{console.error("WordStream: Language settings update error",e),r({success:!1,error:e instanceof Error?e.message:"Unknown error updating language settings"})})),!0):void 0}));const i="AIzaSyCLBHKWu7l78tS2xVmizicObSb0PpUqsxM";const l=t,c=n,d=r,g=o,u=["v1"];function m(e){return s(this,void 0,void 0,(function*(){const t=l,n=e.model||c,r=d,o=g;if(!t)return console.error("[WordStream] Gemini API key is missing"),{success:!1,error:"API key is missing"};try{console.log(`[WordStream] Processing Gemini request with model: ${n}`),console.log("[WordStream] Checking available models");const s=`https://generativelanguage.googleapis.com/v1/models?key=${t}`,a=yield fetch(s),i=yield a.json();if(i.models){const e=i.models.map((e=>e.name));console.log("[WordStream] Available models:",e.join(", ")),e.includes(n)||console.warn(`[WordStream] Primary model ${n} not found in available models. Will try fallback model.`)}else console.warn("[WordStream] Could not retrieve models list:",i);const l=`https://generativelanguage.googleapis.com/${u[0]}/models/${n}:generateContent?key=${t}`;let c="You are WordStream's AI Assistant, a versatile, Claude-like educational assistant that helps users learn while watching videos. Follow these important guidelines:\n\n    1. RESPONSE STRUCTURE & ANSWER DEPTH:\n       - ALWAYS ANSWER FIRST, THEN CHECK USER SATISFACTION - Never respond with a question first unless absolutely necessary.\n       - Provide the best possible answer based on available data before asking if further clarification is needed.\n       - Do not shorten responses arbitrarily—answer as completely as possible.\n       - For complex topics, start with a complete answer and offer further depth if needed.\n       - For straightforward factual questions, provide a concise answer first and offer an option to elaborate if the user is interested.\n       - Never skip directly to asking a question without providing substantial information first.\n    \n    2. LANGUAGE & USER ADAPTATION:\n       - AUTOMATICALLY RESPOND IN THE USER'S LANGUAGE - If they write in Hebrew, respond in Hebrew; if English, respond in English.\n       - Never change languages unless explicitly requested by the user.\n       - Maintain awareness of the last 5-7 user messages to prevent redundant explanations.\n       - If the user follows up on a previous topic, understand and continue naturally.\n       - Extend memory retention when the user continues on the same topic, but reset context smoothly when a completely new topic is introduced.\n    \n    3. VIDEO-RELATED QUESTIONS:\n       - Recognize whether a question is about the video or general and respond accordingly.\n       - When answering timestamped video-related questions, analyze transcript context if available and provide specific insights rather than generic explanations.\n       - If direct video content is unavailable, infer meaning based on related context without speculating. Offer an educated guess only if clearly indicated as such.\n    \n    4. STRUCTURED RESPONSES & FORMATTING:\n       - Use clean, easy-to-read formatting with clear paragraphs or bullet points.\n       - Break down complex topics with headings for longer explanations.\n       - Highlight important keywords to make scanning easier.\n       - Provide full, structured responses by default unless the user requests a summary.\n    \n    5. HANDLING UNCERTAINTY & EDGE CASES:\n       - Never give false information—if you don't have enough data, offer related insights instead.\n       - Minimize \"I don't know\" responses by attempting to infer meaning and offer the most relevant answer possible.\n       - If uncertain, ask clarifying questions instead of giving vague responses.\n    \n    6. CONVERSATIONAL FLOW & ENGAGEMENT:\n       - Never drop topics abruptly.\n       - If a user moves between subjects, acknowledge the transition while keeping responses fluid.\n       - Limit follow-up prompts to once per conversation unless the user actively engages. If the user ignores a follow-up twice, stop prompting for further engagement.\n    \n    7. LANGUAGE LEARNING FOCUS:\n       - Adapt response complexity based on user proficiency. For beginners, simplify explanations; for advanced users, offer in-depth linguistic details.\n       - Provide educational insights like usage examples, synonyms, or pronunciation notes.\n       - Relate explanations to real-world usage scenarios to make learning practical.\n    \n    8. INTEGRATION WITH EXTENSION FEATURES:\n       - Only mention WordStream features when relevant to the conversation—avoid forcing feature suggestions unless they directly benefit the user’s current request.\n       - Offer learning tips that complement the extension's capabilities.\n    \n    9. PERSONALIZED LEARNING GUIDANCE:\n       - Recognize repeated topics from the same user and build upon previous explanations.\n       - Provide encouragement that motivates continued learning.\n    \n    Remember: Always answer first, then check satisfaction. Respond in the user's language. Maintain context with short responses. Structure information clearly. Handle uncertainty gracefully. Keep conversations flowing naturally. Focus on language learning value.";e.videoTitle&&(c+=`\n\nThe user is watching the following video: "${e.videoTitle}"`),e.videoContext&&(e.videoContext.description&&(c+=`\nVideo description: ${e.videoContext.description}`),e.videoContext.channelName&&(c+=`\nChannel: ${e.videoContext.channelName}`),e.videoContext.url&&(c+=`\nURL: ${e.videoContext.url}`));let d=[];e.history&&e.history.length>0&&(d=e.history.map((e=>({role:e.role,parts:[{text:e.content}]})))),d.push({role:"user",parts:[{text:e.message}]});const g={contents:[{role:"user",parts:[{text:c}]},...d.slice(-30)],generationConfig:{temperature:.75,topK:40,topP:.92,maxOutputTokens:8192,stopSequences:[]},safetySettings:[{category:"HARM_CATEGORY_HARASSMENT",threshold:"BLOCK_MEDIUM_AND_ABOVE"},{category:"HARM_CATEGORY_HATE_SPEECH",threshold:"BLOCK_MEDIUM_AND_ABOVE"},{category:"HARM_CATEGORY_SEXUALLY_EXPLICIT",threshold:"BLOCK_MEDIUM_AND_ABOVE"},{category:"HARM_CATEGORY_DANGEROUS_CONTENT",threshold:"BLOCK_MEDIUM_AND_ABOVE"}]};console.log(`[WordStream] Sending request to Gemini API: ${l}`),console.log("[WordStream] Gemini payload:",JSON.stringify(g,null,2).substring(0,500)+"...");const h=yield fetch(l,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(g)});if(!h.ok){const t=yield h.text();if(console.error(`[WordStream] Gemini API error (${h.status}):`,t),404===h.status&&n!==r){console.log(`[WordStream] Trying primary fallback model: ${r}`);return m(Object.assign(Object.assign({},e),{model:r}))}if(404===h.status&&n===r&&r!==o){console.log(`[WordStream] Trying secondary fallback model: ${o}`);return m(Object.assign(Object.assign({},e),{model:o}))}return{success:!1,error:`Gemini API error (${h.status}): ${t}`}}const p=yield h.json();if(console.log("[WordStream] Gemini API response:",p),!p.candidates||0===p.candidates.length||!p.candidates[0].content)return{success:!1,error:"Empty response from Gemini API"};return{success:!0,answer:p.candidates[0].content.parts[0].text}}catch(e){return console.error("[WordStream] Error in Gemini request:",e),{success:!1,error:`Error processing request: ${e instanceof Error?e.message:"Unknown error"}`}}}))}})();